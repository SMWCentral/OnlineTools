const e={c:0,d:2,e:4,f:5,g:7,a:9,b:11};function t(e){return"C C# D D# E F F# G G# A A# B".split(" ")[e%12]+Math.floor(e/12)}const{createApp:n,defineComponent:a,ref:l,reactive:o}=Vue,i=o({noteData:"o3c4c4c4c4\nc4c4c4c4\n>c4c4c4c4\nc4c4c4c4\nd4d4d4d4\nd4d4d4d4\n<f4f4f4f4\nf4f4f4f4",step:1,rawResults:{builtDataSet:[],builtLabel:[]},label:[]}),s=a({name:"FirstStep",setup(){const t=l("appear");return{globalInfo:i,handleSubmit:function(){i.rawResults=function(t,n){const a=t.length,l=new Set,o=[];let i=0,s=4,r=0;function d(e){"string"==typeof o[o.length-1]?o[o.length-1]+=e:o.push(e)}for(;i<a;)switch(t[i]){case"o":s=Number(t[i+1]),i+=2;break;case"<":s-=1,i+=1;break;case">":s+=1,i+=1;break;case"c":case"d":case"e":case"f":case"g":case"a":case"b":r=12*s+e[t[i]],"+"!==t[i+1]&&"-"!==t[i+1]||(r+="+"===t[i+1]?1:-1,i+=1),l.add(r),d(" "),o.push(r),i+=1;break;case"q":case"$":d(t.slice(i,i+3)),i+=3;break;default:d(t[i]),i+=1}const p=[...l];return n.sort&&p.sort(((e,t)=>e>t?1:-1)),{builtDataSet:o,builtLabel:p}}(i.noteData,{sort:"pitch"===t.value}),i.label=i.rawResults.builtLabel.map((e=>({label:`PERC${String(e).padStart(2,"0")}X`,value:e}))),i.step=2},sortMode:t}},template:'\n        <form @submit.prevent="handleSubmit" target="#">\n            <label for="note-data" style="display: block; margin-bottom: 0.5rem">Note Data:</label>\n            <textarea id="note-data" v-model="globalInfo.noteData" style="display: block; resize: vertical; width: 100%; min-height: 250px; margin-bottom: 0.5rem" />\n            <fieldset>\n                <legend>How do we sort labels representing drum notes?</legend>\n                <div>\n                    <input type="radio" id="sort-by-appearing" value="appear" v-model="sortMode" />\n                    <label for="sort-by-appearing">By when they appears</label>\n                </div>\n                <div>\n                    <input type="radio" id="sort-by-pitch" value="pitch" v-model="sortMode" />\n                    <label for="sort-by-pitch">By octave and pitch</label>\n                </div>\n            </fieldset>\n            <div style="display: flex; justify-content: flex-end">\n                <button type="submit">Next Step</button>\n            </div>\n        </form>\n    '}),r=a({name:"SecondStep",setup:()=>({globalInfo:i,idToNoteName:t,handleNextStep:function(){i.step=3},handlePrevStep:function(){i.step=1}}),template:'\n        <p>(Optional) You can set label name for each note here. Each label name should begin or end with UPPERCASE letter.</p>\n        <p>If not needed, just select <strong>Next Step</strong>.</p>\n        <table>\n            <thead>\n                <tr>\n                    <th>Note</th>\n                    <th>Label</th>\n                </tr>\n            </thead>\n            <tbody>\n                <tr v-for="(e, i) in globalInfo.label" key="i">\n                    <td style="vertical-align: middle">{{ idToNoteName(e.value) }}</td>\n                    <td><input v-model="e.label" style="margin: 0" /></td>\n                </tr>\n            </tbody>\n        </table>\n        <div style="display: flex; justify-content: space-between">\n            <button @click="handlePrevStep">Prev Step</button>\n            <button @click="handleNextStep">Next Step</button>\n        </div>\n    '}),d=a({name:"ThirdStep",setup(){const e=l(function(e,t){let n="; Note: All labels suffixed with _R means repeated drum note.\n; Thus, you don't need to redefine instrument, volume, octave, etc. on labels suffixed with _R, which helps saving insert size.\n; Though if you want to use vanilla percussion (@21 - @29), you still have to redefine percussion (volume and others are still not required).\n; See https://smwc.me/1505080 for more details.\n\n";t.forEach((e=>{n+=`"${e.label}=o4 @0 c"\n`,n+=`"${e.label}_R=c"\n`})),n+="\n";let a=null;return e.forEach((e=>{if("number"==typeof e)return n+=t.find((t=>t.value===e))?.label,a===e&&(n+="_R"),void(a=e);n+=e})),n}(i.rawResults.builtDataSet,i.label));return{globalInfo:i,result:e,handleFixAnother:function(){i.step=1}}},template:'\n        <form @submit.prevent="handleFixAnother" target="#">\n            <label for="note-data" style="display: block; margin-bottom: 0.5rem">Here is your fixed Note Data for drum:</label>\n            <textarea id="note-data" v-model="result" style="display: block; resize: vertical; width: 100%; min-height: 250px; margin-bottom: 0.5rem" />\n            <div style="display: flex; justify-content: flex-start">\n                <button type="submit">Fix Another</button>\n            </div>\n        </form>\n    '});export default function(){n({components:{FirstStep:s,SecondStep:r,ThirdStep:d},setup:()=>({globalInfo:i}),template:'\n            <first-step v-if="globalInfo.step === 1"></first-step>\n            <second-step v-if="globalInfo.step === 2"></second-step>\n            <third-step v-if="globalInfo.step === 3"></third-step>\n        '}).mount("#drum-fixer-main")}